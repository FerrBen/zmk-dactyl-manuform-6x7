#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

/ {
    macros {
        tmux_n1: tmux_n1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp N1>;
        };

        tmux_n2: tmux_n2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp N2>;
        };

        tmux_n3: tmux_n3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp N3>;
        };

        tmux_n4: tmux_n4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(B) &kp N4>;
        };

        vim_write: vim_write {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESC &kp COLON &kp W &kp ENTER>;
        };

        gg: gg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp G &kp G>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // LEFT HAND                                                      5-WAY SWITCH      RIGHT HAND

            bindings = <
&kp GRAVE  &kp N1     &kp N2    &kp N3    &kp N4  &kp N5     &kp C_VOL_DN            &kp C_VOLUME_UP        &kp N6       &kp N7  &kp N8          &kp N9        &kp N0         &kp BSPC
&kp LBKT   &kp B      &kp Y     &kp O     &kp U   &kp APOS   &kp APOS                &kp C_BRI_DEC          &kp SEMI     &kp L   &kp D           &kp W         &kp V          &kp RBKT
&kp Z      &kp C      &kp I     &kp E     &kp A   &kp COMMA  &kp EQUAL               &kp COMMA              &kp DOT      &kp H   &kp T           &kp S         &kp N          &kp Q
&kp LALT   &kp G      &kp X     &kp J     &kp K   &kp MINUS  &kp J                   &kp K                  &kp FSLH     &kp R   &kp M           &kp F         &kp P          &kp LALT
&kp M      &kp F      &kp P     &kp LALT  &none   &none      &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &lt 1 ENTER  &none   &none           &kp NUMBER_1  &kp BACKSPACE  &none
&kp TAB    &lt 1 ESC  &kp PIPE  &kp F     &none   &none      &kp LCTRL               &none                  &kp LEFT     &none   &kp LEFT_SHIFT  &none         &none          &none
            >;
        };

        lower {
            bindings = <
&trans         &kp F1        &kp F2        &kp F3    &kp F4    &kp F5      &kp F6         &kp C_BRI_DN  &trans      &kp F7        &kp F8           &kp F9        &kp F10        &kp F11
&kp F12        &trans        &kp EXCL      &kp AT    &kp HASH  &kp DOLLAR  &kp PERCENT    &trans        &kp K_MUTE  &trans        &kp CARET        &kp AMPS      &kp ASTRK      &kp LS(LPAR)
&kp LS(RPAR)   &kp BSLH      &trans        &kp N1    &kp N2    &kp N3      &kp N4         &kp N5        &trans      &kp C_BRI_UP  &trans           &kp MINUS     &kp EQUAL      &kp GRAVE
&kp LS(LBRC)   &kp LS(RBRC)  &kp LS(PIPE)  &kp LALT  &kp N6    &kp N7      &kp N8         &kp N9        &kp N0      &kp LALT      &kp C_VOLUME_UP  &trans        &kp LS(UNDER)  &kp LS(PLUS)
&kp LS(TILDE)  &kp LBKT      &kp RBKT      &trans    &trans    &trans      &trans         &trans        &trans      &trans        &trans           &kp C_VOL_DN  &trans         &trans
&trans         &trans        &trans        &trans    &trans    &trans      &trans         &trans        &trans      &trans        &trans           &mkp LCLK     &mkp MCLK      &mkp RCLK
            >;
        };

        raise {
            bindings = <
&trans     &trans                     &trans                    &trans  &trans  &trans  &trans    &kp C_BRI_DEC  &trans      &trans        &trans        &trans        &trans          &trans
&trans     &trans                     &trans                    &trans  &trans  &trans  &trans    &trans         &kp K_MUTE  &trans        &trans        &kp LC(D)     &kp LC(U)       &trans
&trans     &trans                     &trans                    &trans  &trans  &trans  &trans    &trans         &trans      &kp C_BRI_UP  &vim_write    &kp LEFT      &kp DOWN_ARROW  &kp UP_ARROW
&kp RIGHT  &trans                     &trans                    &trans  &trans  &trans  &trans    &trans         &trans      &trans        &kp C_VOL_UP  &trans        &kp N0          &kp LS(G)
&gg        &kp DOLLAR                 &trans                    &trans  &trans  &trans  &trans    &trans         &trans      &trans        &trans        &kp C_VOL_DN  &trans          &trans
&trans     &kp LS(LC(RIGHT_BRACKET))  &kp LS(LC(LEFT_BRACKET))  &trans  &trans  &trans  &trans    &trans         &trans      &trans        &trans        &trans        &trans          &trans
            >;
        };

        adjust {
            bindings = <
&bt BT_CLR       &bt BT_SEL 0              &bt BT_SEL 1               &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans    &trans  &trans  &trans  &trans  &trans  &trans          &trans
&trans           &out OUT_USB              &out OUT_BLE               &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &mmv MOVE_UP    &trans
&trans           &trans                    &trans                     &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN
&mmv MOVE_RIGHT  &trans                    &trans                     &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans          &msc SCRL_UP
&msc SCRL_DOWN   &trans                    &trans                     &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans          &trans
&mkp LCLK        &kp LS(LC(LEFT_BRACKET))  &kp LS(LC(RIGHT_BRACKET))  &trans        &trans        &trans        &trans    &to 4   &trans  &trans  &trans  &trans  &trans          &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans   &trans    &trans     &trans  &trans    &trans  &trans     &trans    &trans    &trans  &trans  &trans
&trans  &trans  &kp TAB  &kp Q     &kp W      &kp E   &kp R     &kp T   &trans     &trans    &trans    &trans  &trans  &trans
&trans  &trans  &trans   &kp CAPS  &kp A      &kp S   &kp D     &kp F   &kp G      &trans    &trans    &trans  &trans  &trans
&trans  &trans  &trans   &trans    &kp LSHFT  &kp Z   &kp X     &kp C   &kp V      &trans    &trans    &trans  &trans  &trans
&trans  &trans  &trans   &trans    &trans     &trans  &trans    &trans  &kp SPACE  &trans    &trans    &trans  &trans  &trans
&trans  &trans  &trans   &trans    &trans     &trans  &trans    &to 0   &trans     &kp LALT  &kp LGUI  &trans  &trans  &trans
            >;
        };
    };
};
